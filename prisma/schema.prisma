// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//Run 'npx prisma studio' to see the tables

//npx prisma db push, to update

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                         String    @id @default(cuid())
  name                       String?
  email                      String?   @unique
  emailVerified              DateTime?
  image                      String?
  accounts                   Account[]
  sessions                   Session[]
  posts                      Post[]
  comments                   Comment[]
  friends                    User[]    @relation("friends")
  friendsRelation            User[]    @relation("friends")
  friendRequests             User[]    @relation("friendRequests")
  friendRequestsRelation     User[]    @relation("friendRequests")
  friendRequestsSent         User[]    @relation("friendRequestsSent")
  friendRequestsSentRelation User[]    @relation("friendRequestsSent")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String  @id @default(cuid())
  author    User?   @relation(fields: [author_id], references: [id], onDelete: Cascade)
  author_id String?
  text      String
  comments Comment[]  @relation("comments")

  created DateTime @default(now())
  updated DateTime @default(now()) @updatedAt

  @@index([author_id])
}

model Comment {
  id        String  @id @default(cuid())
  author    User?   @relation(fields: [author_id], references: [id], onDelete: Cascade)
  author_id String?
  post      Post?   @relation("comments", fields: [post_id], references: [id], onDelete: Cascade)
  post_id String?
  text      String

  created DateTime @default(now())
  updated DateTime @default(now()) @updatedAt

  @@index([author_id])
  @@index([post_id])
}

// //TABLES
// model User {
//   id  Int @id @default(autoincrement())
//   username  String
//   email String
//   password  String 
//   slug String @unique
//   posts Post[]
//   pictures Picture[]

//   created DateTime @default(now())
//   updated DateTime @default(now()) @updatedAt
// }

// // remove ? later
// model Post {
//   id Int  @id @default(autoincrement())
//   author User? @relation(fields: [author_id], references: [id])
//   author_id Int? 
//   text String

//   created DateTime @default(now())
//   updated DateTime @default(now()) @updatedAt

//   @@index([author_id])
// }

// model Picture {
//   id Int @id @default(autoincrement())
//   owner_id Int 
//   owner User @relation(fields: [owner_id], references: [id])
//   picture_url String

//   @@index([owner_id])
// }
