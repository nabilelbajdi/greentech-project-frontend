// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//Run 'npx prisma studio' to see the tables

//npx prisma db push, to update

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                         String           @id @default(cuid())
  socketId                   String?
  name                       String?
  firstName                  String?
  lastName                   String?
  country                    String?
  city                       String?
  dateOfBirth                DateTime?
  userPath                   String?          @unique
  fullyRegistered            Boolean          @default(false)
  email                      String?          @unique
  emailVerified              DateTime?
  image                      String?
  accounts                   Account[]
  sessions                   Session[]
  posts                      Post[]
  privateMessagesSent        PrivateMessage[] @relation("privateMessagesSent")
  privateMessagesReceived    PrivateMessage[] @relation("privateMessagesReceived")
  comments                   Comment[]
  images                     Image[]
  friends                    User[]           @relation("friends")
  friendsRelation            User[]           @relation("friends")
  friendRequests             User[]           @relation("friendRequests")
  friendRequestsRelation     User[]           @relation("friendRequests")
  friendRequestsSent         User[]           @relation("friendRequestsSent")
  friendRequestsSentRelation User[]           @relation("friendRequestsSent")
  liked_posts                Like[]
  eventsCreated              Event[]
  attendingEvents            Event[]   @relation("event")
  donations                  Donation[]
  groupsCreated              Group[]
  attendingGroups            Group[]   @relation("group")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PrivateMessage {
  id      String    @id @default(cuid())
  from    User      @relation(name: "privateMessagesSent", fields: [from_id], references: [id])
  to      User      @relation(name: "privateMessagesReceived", fields: [to_id], references: [id])
  from_id String
  to_id   String
  message String
  seen    DateTime?
  created DateTime  @default(now())
  updated DateTime  @default(now()) @updatedAt

  @@index([to_id])
  @@index([from_id])
}

model Post {
  id        String    @id @default(cuid())
  author    User?     @relation(fields: [author_id], references: [id], onDelete: Cascade)
  author_id String?
  text      String
  comments  Comment[] @relation("comments")
  images    Image[]
  likes     Like[]
  event     Event?    @relation(fields: [event_id], references: [id], onDelete: Cascade)
  event_id  String?
  group     Group?    @relation(fields: [group_id], references: [id], onDelete: Cascade)
  group_id  String?

  created DateTime @default(now())
  updated DateTime @default(now()) @updatedAt

  @@index([author_id])
  @@index([event_id])
  @@index([group_id])
}

model Comment {
  id        String  @id @default(cuid())
  author    User?   @relation(fields: [author_id], references: [id], onDelete: Cascade)
  author_id String?
  post      Post?   @relation("comments", fields: [post_id], references: [id], onDelete: Cascade)
  post_id   String?
  text      String

  created DateTime @default(now())
  updated DateTime @default(now()) @updatedAt

  @@index([author_id])
  @@index([post_id])
}

model Image {
  id           String     @id @default(cuid())
  author       User?      @relation(fields: [author_id], references: [id], onDelete: Cascade)
  author_id    String?
  post         Post?      @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id      String?
  event        Event?     @relation(fields: [event_id], references: [id], onDelete: Cascade)
  event_id     String?    @unique
  donation     Donation?  @relation(fields: [donation_id], references: [id], onDelete: Cascade)
  donation_id  String?    @unique
  group        Group?     @relation(fields: [group_id], references: [id], onDelete: Cascade)
  group_id     String?    @unique
  url          String

  created      DateTime   @default(now())
  updated      DateTime   @default(now()) @updatedAt

  @@index([author_id])
  @@index([post_id])
}

model Like {
  id          String  @id @default(cuid())
  liked_by    User?   @relation(fields: [liked_by_id], references: [id], onDelete: Cascade)
  liked_by_id String?
  post        Post?   @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id     String?

  created DateTime @default(now())
  updated DateTime @default(now()) @updatedAt

  @@index([liked_by_id])
  @@index([post_id])
}

model Event {
  id            String @id @default(cuid())
  admin         User?  @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  admin_id      String?
  name          String?
  image         Image?
  start_date    String?
  end_date      String?
  start_time    String?
  end_time      String?
  address       String?
  lat           String?
  lng           String?
  description   String?
  attendings    User[] @relation("event")
  posts         Post[]

  created DateTime @default(now())
  updated DateTime @default(now()) @updatedAt

  @@index([admin_id])
}

model Donation {
  id              String @id @default(cuid())
  user            User?  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id         String?
  name            String?
  description     String?
  category        String?
  condition       String?
  address         String?
  lat             String?
  lng             String?
  start_time      String?
  start_date      String?
  end_date        String?
  end_time        String?
  images          Image[]

  created DateTime @default(now())
  updated DateTime @default(now()) @updatedAt

  @@index([user_id])
}

model Group {
  id            String @id @default(cuid())
  admin         User?  @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  admin_id      String?
  name          String?
  image         Image?
  description   String?
  attendings    User[] @relation("group")
  posts         Post[]
  start_date    String?
  start_time    String?
  address       String?
  lat           String?
  lng           String?

  created DateTime @default(now())
  updated DateTime @default(now()) @updatedAt

  @@index([admin_id])
}